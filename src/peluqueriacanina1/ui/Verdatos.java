/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package peluqueriacanina1.ui;

import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import peluqueriacanina1.logica.Controlador;
import peluqueriacanina1.logica.Mascota;

/**
 *
 * @author cafu1
 */
public class Verdatos extends javax.swing.JFrame {
Controlador control = null;
ModificarDatos pantalla = null;
    
    public Verdatos() {
      control = new Controlador();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablamascotas = new javax.swing.JTable();
        BtnEliminar = new javax.swing.JButton();
        BtnEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Consultar Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 36))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos mascotas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 18))); // NOI18N

        tablamascotas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tablamascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablamascotas);

        BtnEliminar.setText("Eliminar");
        BtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarActionPerformed(evt);
            }
        });

        BtnEditar.setText("Editar");
        BtnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(BtnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(331, 331, 331))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 133, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
         cargarTabla();
    }//GEN-LAST:event_formWindowOpened

    private void BtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarActionPerformed
                            //controlo que la tabla no este vacia
                        if(tablamascotas.getRowCount()> 0) {
                            // controlo que se haya selecionado a una mascota o registro
                           if(tablamascotas.getSelectedRow()!=-1) {
                                   //obtengo id de la mascota a eliminar
                            int num_cliente = Integer.parseInt(String.valueOf(tablamascotas.getValueAt(tablamascotas.getSelectedRow(),0)));
                                  //llamo al metodo borrar mascota
                               control.borrarMascota(num_cliente);
          
                                        //aviso al usuario que borro correctamente
                         JOptionPane.showMessageDialog(this,"Mascota eliminada exitosamente","Registro eliminado",JOptionPane.INFORMATION_MESSAGE);
      
                                              cargarTabla();
                           }                     
                              else{
               JOptionPane.showMessageDialog(this,"No ha seleccionado ninguna  para eliminar","Error Mensaje",JOptionPane.ERROR_MESSAGE);

                       
                }                                
                  
               }
                  else{
                          
                       JOptionPane.showMessageDialog(this,"No hay datos en la tabla para eliminar","Error Mensaje",JOptionPane.ERROR_MESSAGE);

}

    }//GEN-LAST:event_BtnEliminarActionPerformed

    private void BtnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEditarActionPerformed
                       //controlo que la tabla no este vacia
                        if(tablamascotas.getRowCount()> 0) {
                            // controlo que se haya selecionado a una mascota o registro
                           if(tablamascotas.getSelectedRow()!=-1) {
                                   //obtengo id de la mascota a eliminar
                              int num_cliente = Integer.parseInt(String.valueOf(tablamascotas.getValueAt(tablamascotas.getSelectedRow(),0)));             
                                  pantalla = new ModificarDatos (num_cliente);               
                                 pantalla.setVisible(true);
                                 pantalla.setLocationRelativeTo(null);

                                              this.dispose();
                           }                     
                              else{
               JOptionPane.showMessageDialog(this,"No ha seleccionado ninguna  para eliminar","Error",JOptionPane.ERROR_MESSAGE);

                       
                }                                
                  
               }
                  else{
                          
                       JOptionPane.showMessageDialog(this,"No hay datos en la tabla para eliminar","Error",JOptionPane.ERROR_MESSAGE);

}


             
    }//GEN-LAST:event_BtnEditarActionPerformed
                   
  
           

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEditar;
    private javax.swing.JButton BtnEliminar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablamascotas;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
//modelo que tendra la tabla

     DefaultTableModel tabla = new DefaultTableModel() {
  //filas y columnas no sean editables
@Override
    public boolean isCellEditable(int row,int column){
       return false;
} 

};
   //establecemos nombres de colunmas
     String titulos[] = {"Num","Nombre_Mascota","Color","Raza","Alergico","Atencion especial","Nombre_dueeño","Celular_dueño"};
            tabla.setColumnIdentifiers(titulos);
                 //carga de datos desde la base de datos a la tabla
               List <Mascota> listaMascota =  control.traerMascota();     
                //recorrer lista y mostrar cada uno de los elementos
               if(listaMascota!=null){
                for(Mascota masco:listaMascota){
                  Object[] objeto ={masco.getNum_cliente(),masco.getNombre_mascota(),masco.getColor(),masco.getRaza(),masco.getAlergico(),masco.getAtencion_especial(),
                   masco.getUnDueño().getNombre(),masco.getUnDueño().getCelDueño() };

                         tabla.addRow(objeto);

}


}
    
      tablamascotas.setModel(tabla);

    }
}
